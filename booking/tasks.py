from celery import shared_task
from django.utils import timezone
from datetime import timedelta
from .models import Booking, User
import logging
import asyncio

logger = logging.getLogger(__name__)


@shared_task
def send_booking_notification(booking_id, notification_type):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    try:
        booking = Booking.objects.get(id=booking_id)
        user = booking.user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ Telegram
        if not user.telegram_chat_id:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª Telegram")
            return f"Telegram –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if notification_type == 'created':
            if booking.status == 'pending':
                message = f"üìù –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!\n\n"
            else:
                message = f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n\n"
        elif notification_type == 'approved':
            message = f"‚úÖ –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n\n"
        elif notification_type == 'reminder':
            time_until = booking.start_time - timezone.now()
            hours = int(time_until.total_seconds() // 3600)
            minutes = int((time_until.total_seconds() % 3600) // 60)

            if hours > 0:
                time_str = f"—á–µ—Ä–µ–∑ {hours} —á. {minutes} –º–∏–Ω."
            else:
                time_str = f"—á–µ—Ä–µ–∑ {minutes} –º–∏–Ω."

            message = f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏!\n\n"
            message += f"–ù–∞—á–∞–ª–æ {time_str}\n\n"
        elif notification_type == 'completed':
            message = f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
        elif notification_type == 'cancelled':
            message = f"‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!\n\n"
        else:
            message = f"üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        message += f"üîß –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {booking.equipment.name}\n"
        message += f"üìÖ –í—Ä–µ–º—è: {booking.start_time.strftime('%d.%m.%Y %H:%M')} - {booking.end_time.strftime('%H:%M')}\n"
        message += f"üè¢ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {booking.equipment.department.name}\n"

        if booking.equipment.location:
            message += f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {booking.equipment.location}\n"

        message += f"üìù –¶–µ–ª—å: {booking.purpose}\n"

        if notification_type == 'reminder':
            message += f"\nüí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–æ–π—Ç–∏ –≤–æ–≤—Ä–µ–º—è!"
        elif notification_type == 'approved':
            message += f"\nüí° –ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ (–°–ò–ù–•–†–û–ù–ù–û)
        success = send_telegram_message_sync(user.telegram_chat_id, message)

        if success:
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}: {notification_type}")
            return f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notification_type}"
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}")
            return f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"

    except Booking.DoesNotExist:
        logger.error(f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å ID {booking_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å ID {booking_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
        return f"–û—à–∏–±–∫–∞: {str(e)}"


def send_telegram_message_sync(chat_id, message):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        from .telegram_bot import get_bot
        bot = get_bot()
        return bot.send_notification(chat_id, message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False


@shared_task
def check_booking_reminders():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö"""
    now = timezone.now()

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 2 —á–∞—Å–∞
    reminder_time_2h = now + timedelta(hours=2)
    bookings_2h = Booking.objects.filter(
        status='approved',
        start_time__gte=now,
        start_time__lte=reminder_time_2h
    ).exclude(
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ, –∫–æ–º—É —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        id__in=Booking.objects.filter(
            status='approved',
            start_time__gte=now - timedelta(hours=2, minutes=5),
            start_time__lte=now - timedelta(hours=1, minutes=55)
        ).values_list('id', flat=True)
    )

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 15 –º–∏–Ω—É—Ç (–¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π)
    reminder_time_15m = now + timedelta(minutes=15)
    bookings_15m = Booking.objects.filter(
        status='approved',
        start_time__gte=now,
        start_time__lte=reminder_time_15m,
        end_time__lte=now + timedelta(hours=2)  # —Ç–æ–ª—å–∫–æ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∫–æ—Ä–æ—á–µ 2 —á–∞—Å–æ–≤
    ).exclude(
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ, –∫–æ–º—É —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        id__in=Booking.objects.filter(
            status='approved',
            start_time__gte=now - timedelta(minutes=20),
            start_time__lte=now - timedelta(minutes=10)
        ).values_list('id', flat=True)
    )

    reminders_sent = 0

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 2 —á–∞—Å–∞
    for booking in bookings_2h:
        send_booking_notification.delay(booking.id, 'reminder')
        reminders_sent += 1

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 15 –º–∏–Ω—É—Ç
    for booking in bookings_15m:
        send_booking_notification.delay(booking.id, 'reminder')
        reminders_sent += 1

    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {reminders_sent} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    return f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {reminders_sent} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"


@shared_task
def auto_complete_bookings():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    now = timezone.now()

    # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
    expired_bookings = Booking.objects.filter(
        status__in=['approved', 'active'],
        end_time__lt=now
    )

    completed_count = 0

    for booking in expired_bookings:
        booking.status = 'completed'
        booking.save()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        send_booking_notification.delay(booking.id, 'completed')
        completed_count += 1

    logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ {completed_count} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
    return f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ {completed_count} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"


@shared_task
def create_recurring_bookings():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    # TODO: –†–µ–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∂–µ
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
    return "–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"


@shared_task
def test_task():
    """–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Celery"""
    logger.info("–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    return "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!"
