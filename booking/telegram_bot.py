import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from django.conf import settings
from django.contrib.auth import get_user_model
from .models import Booking, DepartmentAccess
from asgiref.sync import sync_to_async

User = get_user_model()
logger = logging.getLogger(__name__)


class EquipmentBookingBot:
    def __init__(self):
        self.application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()
        self.setup_handlers()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("mybookings", self.my_bookings_command))
        self.application.add_handler(CommandHandler("cancel", self.cancel_booking_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id = update.effective_chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = await sync_to_async(self.get_user_by_chat_id)(chat_id)

        if user:
            await update.message.reply_text(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user.username}!\n\n"
                f"–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±–æ—Ç—É.\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                f"/mybookings - –º–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
                f"/help - —Å–ø—Ä–∞–≤–∫–∞"
            )
            return

        await update.message.reply_text(
            "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è!\n\n"
            "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á.\n\n"
            "–ö–ª—é—á –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ —Å–∞–π—Ç–µ.\n\n"
            "–ü—Ä–∏–º–µ—Ä: abc123def456"
        )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–ª—é—á–∏ –ø—Ä–∏–≤—è–∑–∫–∏)"""
        chat_id = update.effective_chat.id
        message_text = update.message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç
        user = await sync_to_async(self.get_user_by_chat_id)(chat_id)
        if user:
            await update.message.reply_text(
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
            )
            return

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–ª—é—á—É
        user = await sync_to_async(self.get_user_by_telegram_key)(message_text)

        if user:
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
            user.telegram_chat_id = chat_id
            await sync_to_async(user.save)()

            await update.message.reply_text(
                f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n\n"
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.username}!\n"
                f"–†–æ–ª—å: {user.get_role_display()}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö.\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                f"/mybookings - –º–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
                f"/help - —Å–ø—Ä–∞–≤–∫–∞"
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –ø—Ä–∏–≤—è–∑–∫–∏.\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ —Å–∞–π—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )

    async def my_bookings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /mybookings - —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id = update.effective_chat.id
        user = await sync_to_async(self.get_user_by_chat_id)(chat_id)

        if not user:
            await update.message.reply_text(
                "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏."
            )
            return

        bookings = await sync_to_async(self.get_user_bookings_with_equipment)(user)

        if not bookings:
            await update.message.reply_text("üìÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
            return

        message = "üìÖ –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
        keyboard = []

        for booking in bookings:
            status_emoji = {
                'pending': '‚è≥',
                'approved': '‚úÖ',
                'active': 'üîÑ',
                'completed': '‚úÖ',
                'cancelled': '‚ùå'
            }.get(booking.status, '‚ùì')

            message += (
                f"{status_emoji} {booking.equipment.name}\n"
                f"üìÖ {booking.start_time.strftime('%d.%m.%Y %H:%M')} - "
                f"{booking.end_time.strftime('%H:%M')}\n"
                f"üè¢ {booking.equipment.department.name}\n"
                f"üìä {booking.get_status_display()}\n\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
            if booking.status in ['pending', 'approved']:
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å #{booking.id}",
                        callback_data=f"cancel_{booking.id}"
                    )
                ])

        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
        await update.message.reply_text(message, reply_markup=reply_markup)

    async def cancel_booking_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /cancel [id] - –æ—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        chat_id = update.effective_chat.id
        user = await sync_to_async(self.get_user_by_chat_id)(chat_id)

        if not user:
            await update.message.reply_text(
                "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n–ü—Ä–∏–º–µ—Ä: /cancel 123"
            )
            return

        try:
            booking_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        booking = await sync_to_async(self.get_booking_by_id_with_equipment)(booking_id, user)


        if not booking:
            await update.message.reply_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        if booking.status not in ['pending', 'approved']:
            await update.message.reply_text(
                "‚ùå –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (—Å—Ç–∞—Ç—É—Å: {booking.get_status_display()})."
            )
            return

        # –û—Ç–º–µ–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        booking.status = 'cancelled'
        await sync_to_async(booking.save)()

        await update.message.reply_text(
            f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{booking.id} –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
            f"üîß {booking.equipment.name}\n"
            f"üìÖ {booking.start_time.strftime('%d.%m.%Y %H:%M')}"
        )

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        if query.data.startswith('cancel_'):
            booking_id = int(query.data.split('_')[1])
            chat_id = query.from_user.id
            user = await sync_to_async(self.get_user_by_chat_id)(chat_id)

            if not user:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.")
                return

            booking = await sync_to_async(self.get_booking_by_id_with_equipment)(booking_id, user)

            if booking and booking.status in ['pending', 'approved']:
                booking.status = 'cancelled'
                await sync_to_async(booking.save)()

                await query.edit_message_text(
                    f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{booking.id} –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
                    f"üîß {booking.equipment.name}\n"
                    f"üìÖ {booking.start_time.strftime('%d.%m.%Y %H:%M')}"
                )
            else:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞"""
        help_text = (
            "ü§ñ –ë–æ—Ç —Å–∏—Å—Ç–µ–º—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n\n"
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/start - –ø—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
            "/mybookings - –º–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            "/cancel [ID] - –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üí° –î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ —Å–∞–π—Ç–µ.\n\n"
            "üìß –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º\n"
            "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º\n"
            "‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
        )

        await update.message.reply_text(help_text)

    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    def get_user_by_chat_id(self, chat_id):
        try:
            return User.objects.get(telegram_chat_id=chat_id)
        except User.DoesNotExist:
            return None

    def get_user_by_telegram_key(self, key):
        try:
            return User.objects.get(telegram_key=key)
        except User.DoesNotExist:
            return None

    def get_user_bookings(self, user):
        return list(Booking.objects.filter(
            user=user,
            status__in=['pending', 'approved', 'active']
        ).select_related('equipment', 'equipment__department').order_by('start_time')[:10])

    def get_booking_by_id(self, booking_id, user):
        try:
            return Booking.objects.get(id=booking_id, user=user)
        except Booking.DoesNotExist:
            return None

    def send_notification(self, chat_id, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        print(f"üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}")
        print(f"üìù –¢–µ–∫—Å—Ç: {message[:100]}...")

        result = self.send_message(chat_id, message)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")

        return result

    def run_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.application.run_polling()

    def get_booking_by_id_with_equipment(self, booking_id, user):
        try:
            return Booking.objects.select_related('equipment').get(id=booking_id, user=user)
        except Booking.DoesNotExist:
            return None

    def get_user_bookings_with_equipment(self, user):
        return list(Booking.objects.filter(
            user=user,
            status__in=['pending', 'approved', 'active']
        ).select_related('equipment', 'equipment__department').order_by('start_time')[:10])




# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot_instance = None


def get_bot():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞"""
    global bot_instance
    if bot_instance is None:
        bot_instance = EquipmentBookingBot()
    return bot_instance
